#!/usr/bin/env python
#
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.

"""CDR generator (primarily for testing purposes).

Usage: gen_cdr [options]

Options:
    [--duration=<call-duration>]
    -c, --caller=<caller-number>
    -d, --destination=<dest-number>
    --digits=<digits>         [default: 10] digits after prefix
    --prefix=<number-prefix>  [default: +1] country code, '+' not required

Examples:
    gen_cdr --prefix=+63 --digits=11

Submit POST requests to the web front-end using curl like this:
    curl http://<web-address>/internal/api/v1/voice/ \
    --data "cdr=`cat /tmp/cdr.xml`"
assuming output of this script is written to /tmp/cdr.xml.
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from random import randrange
import sys

import docopt

from ccm.common.utils import xml_cdr


def _get_number(which, digits, prefix, **kwargs):
    number = kwargs.get(which)
    if number is None:
        number = xml_cdr.gen_number(int(digits), prefix)
    return number[1:] if number.startswith("+") else number


def cloud_voice_cdr(kwargs):
    """ Create an XML CDR representing a voice call. """
    # docopt has a funky get() implementation
    duration = (kwargs["duration"]
                if "duration" in kwargs
                else randrange(0, 100))
    args = {
        "billsec": duration,
        "caller_id_name": _get_number("caller", **kwargs),
        "destination_number": _get_number("destination", **kwargs),
    }
    print(args, file=sys.stderr)
    return xml_cdr.CloudVoiceCdr(**args).xml


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    cdr_args = {k[2:]: v for k, v in args.items() if k.startswith("--")}
    doc = cloud_voice_cdr(cdr_args)
    doc.writexml(sys.stdout, addindent="  ", newl="\n")
